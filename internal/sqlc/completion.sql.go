// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: completion.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (name)
VALUES (?)
RETURNING id, name, created_at, updated_at, deleted_at
`

func (q *Queries) CreateChat(ctx context.Context, name sql.NullString) (Chat, error) {
	row := q.db.QueryRowContext(ctx, createChat, name)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (chat_id, content, role_id)
VALUES (?, ?, ?)
RETURNING id, chat_id, content, role_id, created_at, updated_at, deleted_at
`

type CreateMessageParams struct {
	ChatID  int64
	Content string
	RoleID  int64
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.ChatID, arg.Content, arg.RoleID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.Content,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
